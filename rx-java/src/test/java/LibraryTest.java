import org.junit.Test;
import rx.Observable;

import java.math.BigInteger;
import java.time.DayOfWeek;
import java.util.concurrent.TimeUnit;

import static java.util.Calendar.SUNDAY;
import static java.util.concurrent.TimeUnit.MILLISECONDS;
import static org.junit.Assert.*;
import static rx.Observable.timer;
import static java.util.concurrent.TimeUnit.SECONDS;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'luist' at '26/06/16 16:43' with Gradle 2.12
 *
 * @author luist, @date 26/06/16 16:43
 */
public class LibraryTest {
    @Test
    public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }

    @Test
    public void testComposition1() {
        Observable
                .just(8, 9, 10)
                .doOnNext(i -> System.out.println("A:" + i))
                .filter(i -> i % 3 > 0)
                .doOnNext(i -> System.out.println("B:" + i))
                .map(i -> "#" + i * 10)
                .doOnNext(i -> System.out.println("C:" + i))
                .filter(s -> s.length() < 4)
                .subscribe(System.out::println);
    }

    @Test
    public void testDelay() throws Exception {
        Observable
                .just("Lorem",
                        "ipsum",
                        "dolor",
                        "sit",
                        "amet",
                        "consectetur",
                        "adipiscing",
                        "elit")
                .delay(word -> timer(word.length(), SECONDS))
                .subscribe(System.out::println);
        TimeUnit.SECONDS.sleep(15);
    }

    @Test
    public void testFlatMapOutOfOrder() throws InterruptedException {
        Observable.just(10L, 1L)
                .flatMap(x -> Observable.just(x).delay(x, TimeUnit.SECONDS))
                .subscribe(System.out::println);
        TimeUnit.SECONDS.sleep(20);
    }

    Observable<String> loadRecordsFor(DayOfWeek dow) {
        switch(dow) {
            case SUNDAY:
                return Observable
                        .interval(90, MILLISECONDS)
                        .take(5)
                        .map(i -> "Sun-" + i);
            case MONDAY:
                return Observable
                        .interval(65, MILLISECONDS)
                        .take(5)
                        .map(i -> "Mon-" + i);
            default:
                return  Observable.just("Default");
        }
    }

    @Test
    public void testFlatMapOutOffOrder() throws InterruptedException {
        Observable
                .just(DayOfWeek.SUNDAY, DayOfWeek.MONDAY)
                .flatMap(this::loadRecordsFor).subscribe(System.out::println);
        TimeUnit.SECONDS.sleep(20);
    }

    @Test
    public void testConcatMap() throws InterruptedException {
        Observable
                .just(DayOfWeek.SUNDAY, DayOfWeek.MONDAY)
                .concatMap(this::loadRecordsFor).subscribe(System.out::println);
        TimeUnit.SECONDS.sleep(20);
    }

    @Test
    public void testScanOperator() {
        Observable<BigInteger> factorials = Observable
                .range(2, 100)
                .scan(BigInteger.ONE, (big, curr) -> big.multiply(BigInteger.valueOf(curr)));
        factorials
                .subscribe(System.out::println);
    }
}
